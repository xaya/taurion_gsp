/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019-2025  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";
option cc_enable_arenas = true;

import "proto/building.proto";
import "proto/character.proto";
import "proto/combat.proto";
import "proto/geometry.proto";
import "proto/modifier.proto";

package pxd.proto;

/* ************************************************************************** */

/**
 * Size of a vehicle.
 */
enum VehicleSize
{
  STARTER = 1;
  LIGHT = 2;
  MEDIUM = 3;
  HEAVY = 4;
  VERY_HEAVY = 5;
}

/**
 * Data about the ability to refine items of this type to other item types
 * (i.e. raw materials into refined resources).
 */
message RefiningData
{

  /** Number of instances going into one "refining unit".  */
  optional uint32 input_units = 1;

  /** Base cost (burnt) in vCHI for one refinement step.  */
  optional uint32 cost = 2;

  /**
   * The outputs (as item type, amount) for one refining step (i.e.
   * "input_units" input units).
   */
  map<string, uint32> outputs = 3;

}

/**
 * Specific data for blueprint items defining the modalities for
 * constructing stuff from it.
 */
message BlueprintData
{

  /** The item type constructed from the blueprint.  */
  optional string for_item = 1;

  /**
   * Whether or not this is an original.  Originals can be copied and
   * can be used an unlimited amount of time, whereas copies (if not
   * originals) cannot be copied themselves and can only be used once
   * to build an item.
   */
  optional bool original = 2;

}

/**
 * Specific data for prize items.
 */
message PrizeData
{
  /* There is no specific data we need to define for prize items,
     this is just a placeholder to mark them as prizes.  */
}

/**
 * Data about the ability to reverse-engineer an item to obtain blueprints.
 */
message RevEngData
{

  /** Cost (in vCHI) for a reveng attempt.  */
  optional uint32 cost = 1;

  /**
   * Types of items (most likely blueprint originals) that can be obtained
   * from this through reverse engineering.
   */
  repeated string possible_outputs = 2;

}

/**
 * Data specific about items that are vehicles.
 */
message VehicleData
{

  /** Base cargo space of this vehicle.  */
  optional uint32 cargo_space = 1;

  /** Base movement speed (in milli-tiles per block).  */
  optional uint32 speed = 2;

  /** Basic regeneration data and max HP.  */
  optional RegenData regen_data = 3;

  /** Basic combat data (including attacks mostly).  */
  optional CombatData combat_data = 4;

  /** Base mining speed for the vehicle.  */
  optional MiningData.Speed mining_rate = 5;

  /** Base prospecting rate (if prospecting is possible).  */
  optional uint32 prospecting_blocks = 6;

  /** Size of the vehicle for fitment purposes.  */
  optional VehicleSize size = 7;

  /**
   * Number of equipment slots of each type.  The slot types are just strings
   * which have to be matched between here and the fitment configs.  The valid
   * values are "high", "mid" and "low".  Unfortunately we cannot use enum
   * values as they can't be keys in protocol buffer maps.
   */
  map<string, uint32> equipment_slots = 8;

}

/**
 * Data specific about items that are fitments.
 */
message FitmentData
{

  /** The type of slot this requires.  */
  optional string slot = 1;

  /**
   * If set, then this fitment can only be placed on a vehicle of the
   * (exact) given size.
   */
  optional VehicleSize vehicle_size = 2;

  /** An attack this does.  */
  optional Attack attack = 3;

  /** Modification to the cargo space.  */
  optional StatModifier cargo_space = 4;

  /** Modification to the movement speed.  */
  optional StatModifier speed = 5;

  /** Modification to max armour HP.  */
  optional StatModifier max_armour = 6;

  /** Modification to max shield HP.  */
  optional StatModifier max_shield = 7;

  /** Modification to shield regeneration rate.  */
  optional StatModifier shield_regen = 8;

  /** Modification to armour regeneration rate.  */
  optional StatModifier armour_regen = 9;

  /** Modification of all attack ranges (and AoE area sizes).  */
  optional StatModifier range = 10;

  /** Modification of all attack damages (min and max).  */
  optional StatModifier damage = 11;

  /** Modification to the received damage (e.g. armour hardening).  */
  optional StatModifier received_damage = 12;

  /** Modification to the self hit chance.  */
  optional StatModifier hit_chance = 13;

  /** Modification to the vehicle's allowed fitment complexity.  */
  optional StatModifier complexity = 14;

  /**
   * Modification to the vehicle's prospecting blocks.  Since a larger number
   * of blocks is worse, a fitment will likely have a negative modifier here.
   */
  optional StatModifier prospecting_blocks = 15;

  /** MOdification to the vehicle's mining rate (min and max).  */
  optional StatModifier mining_rate = 16;

  /** Low-HP-boost this fitment provides (if any).  */
  optional LowHpBoost low_hp_boost = 17;

  /** Self-destruct ability of this fitment (if any).  */
  optional SelfDestruct self_destruct = 18;

  /** If this is a mobile refinery, the stats for it.  */
  optional MobileRefinery refining = 19;

}

/**
 * Hardcoded data defining a type of fungible item.
 */
message ItemData
{

  /** The cargo space it uses per unit.  */
  optional uint32 space = 1;

  /** For items that have one, the complexity level.  */
  optional uint32 complexity = 2;

  /** Whether or not this item has an associated blueprint.  */
  optional bool with_blueprint = 3;

  /**
   * The resources required to construct one of this item type, assuming
   * there exists a blueprint for it.
   */
  map<string, uint32> construction_resources = 4;

  /**
   * If this item is a fitment or vehicle and specific to a particular faction,
   * then this field indicates that faction.  May be null for faction-neutral
   * items, e.g. most fitments.
   *
   * For fitments, this has to be explicitly set in the roconfig data.
   * For vehicles, it is deduced from the name prefix (e.g. "rv ") via
   * the RoConfig logic.
   */
  optional string faction = 5;

  oneof type
  {

    /** If this type of item can be refined, then the stats for doing so.  */
    RefiningData refines = 101;

    /** If this is a blueprint, the associated data.  */
    BlueprintData is_blueprint = 102;

    /** If this is a prize, the associated data.  */
    PrizeData prize = 103;

    /**
     * If this can be reverse engineered (i.e. is an artefact), the
     * configuration data specifying the corresponding stats.
     */
    RevEngData reveng = 104;

    /** If this is a vehicle item, the specific stats for that.  */
    VehicleData vehicle = 105;

    /** If this is a fitment, the specific stats for that.  */
    FitmentData fitment = 106;

  }

}

/* ************************************************************************** */

/**
 * Hardcoded data defining a type of building.
 */
message BuildingData
{

  /**
   * The enter/exit L1 radius of this building.  Characters can enter
   * the building if they are within this L1 radius of the centre coordinate,
   * and when exiting, they will appear on a random spot within that radius.
   */
  optional uint32 enter_radius = 1;

  /**
   * All tiles that make up the building's shape, in the basic, untransformed
   * way.  The coordinates are relative to the building's centre.
   */
  repeated HexCoord shape_tiles = 2;

  /**
   * Combination of combat and regen data for a building or
   * the foundation.
   */
  message AllCombatData
  {
    optional CombatData combat_data = 1;
    optional RegenData regen_data = 2;
  }

  /**
   * Combat data for the foundation of the building alone.
   */
  optional AllCombatData foundation = 3;

  /**
   * Combat data for the full building (after construction is done).
   */
  optional AllCombatData full_building = 4;

  /**
   * Required resources and other data for constructing the building.
   */
  message ConstructionData
  {

    /**
     * Resources (keyed by item type, value is the quantity) required to
     * lay the foundation.
     */
    map<string, uint32> foundation = 1;

    /** Resources for upgrading the foundation to the full building.  */
    map<string, uint32> full_building = 2;

    /**
     * Number of blocks the construction (from foundation to full building)
     * takes for this type.
     */
    optional uint32 blocks = 3;

    /**
     * The faction of this building type.  If this is set, then only players
     * with a matching faction can build it.  This is inferred from the
     * building name in roconfig data and only set at runtime.
     */
    optional string faction = 4;

  }

  /** The data for constructing this building.  */
  optional ConstructionData construction = 5;

  /**
   * The set of services offered by a building.  Since "false" is the default
   * value for a boolean field, only those services that are offered need to
   * be listed in the actual config data.
   */
  message Services
  {
    optional bool refining = 1;
    optional bool armour_repair = 2;
    optional bool reverse_engineering = 3;
    optional bool blueprint_copy = 4;
    optional bool item_construction = 5;
    optional bool vehicle_construction = 6;
  }

  /** Services this building type offers.  */
  optional Services offered_services = 6;

}

/* ************************************************************************** */

/**
 * Data for the resource distribution on the map (when prospecting).
 * This is based on multiple "areas" where one or two resources occur.
 * Each area has a central x/y coordinate.  Then within a core L1 radius
 * around this area, those resources appear with "full chance".  Towards
 * an outer radius, the chance falls off to zero linearly.  If multiple
 * areas overlap (or there are two resources in one), then we pick between
 * them based on their chances as weights.
 *
 * The radii themselves are just constants in the source code.  The proto
 * data in this message holds the more complex things, like the list of
 * areas and also how the ores correspond to artefacts.
 */
message ResourceDistribution
{

  /**
   * One area where resources can be found.
   */
  message Area
  {

    /** The centre coordinate of the area.  */
    optional HexCoord centre = 1;

    /** The type(s) of resources to be found here.  */
    repeated string resources = 2;

  }

  /** Resource areas.  */
  repeated Area areas = 1;

  /**
   * Data specifying the artefacts found together with a particular
   * ore in a region.
   */
  message PossibleArtefacts
  {

    /**
     * Entry for one artefact with its chance of finding it.
     */
    message Entry
    {
      /** The artefact's item name.  */
      optional string artefact = 1;
      /** The chance as 1 / N.  */
      optional uint32 probability = 2;
    }

    /**
     * Entries for all the artefacts that can be found with a given ore
     * in a region.  They are checked in order until the end or the first
     * artefact is discovered.
     */
    repeated Entry entries = 1;

  }

  /** The artefacts that can be found with each ore type.  */
  map<string, PossibleArtefacts> possible_artefacts = 2;

}

/* ************************************************************************** */

/**
 * Data for a building that is initially on the map.  All of them are
 * ancient and indestructible.
 */
message InitialBuilding
{

  /** Type of the building.  */
  optional string type = 1;

  /** Centre of the building.  */
  optional HexCoord centre = 2;

  /** Shape transformation of the building.  */
  optional ShapeTransformation shape_trafo = 3;

}

/**
 * Data for a safe zone.  They represent both the general no-combat zones
 * as well as the faction-specific starter areas.
 */
message SafeZone
{

  /** Centre of the zone.  */
  optional HexCoord centre = 1;

  /** L1 radius of the zone.  */
  optional uint32 radius = 2;

  /**
   * If this is a faction starter zone, the faction as string ("r", "g" or "b").
   * If this is a general no-combat zone, then the field is unset.
   */
  optional string faction = 3;

}

/* ************************************************************************** */

/**
 * Definition of a spawn location.
 */
message SpawnArea
{

  /** The building ID into which new characters are spawned.  */
  optional uint64 building_id = 1;

}

/**
 * Definition of the configuration for one prospecting prize.
 */
message ProspectingPrize
{

  /**
   * Name for the prize (used in the game state and also for constructing
   * the item name by appending " prize").
   */
  optional string name = 1;

  /** Number of prizes of this type available.  */
  optional uint32 number = 2 ;

  /** Probability to win this prize as 1 / N.  */
  optional uint32 probability = 3;

}

/**
 * A stage in the burnsale schedule.
 */
message BurnsaleStage
{

  /** Amount of vCHI to be sold in the stage.  */
  optional uint64 amount_sold = 1;

  /** Price of one coin in CHI satoshi.  */
  optional uint64 price_sat = 2;

}

/**
 * Basic parameters of the game.
 */
message Params
{

  /** The amount of CHI to be paid for a character.  */
  optional int64 character_cost = 1;

  /** The maximum number of characters per account.  */
  optional uint32 character_limit = 2;

  /**
   * Number of retries of a blocked movement step before the movement
   * is cancelled completely.  Note that this is really the number of *retries*,
   * meaning that movement is only cancelled after N+1 blocked turns if N is
   * the value here.
   */
  optional uint32 blocked_step_retries = 3;

  /** The number of blocks for which a character stays on a damage list.  */
  optional uint32 damage_list_blocks = 4;

  /**
   * The number of blocks after which a region can be reprospected (if there
   * are no other factors preventing it).
   */
  optional uint32 prospection_expiry_blocks = 5;

  /** The number of HP that can be repaired per block.  */
  optional uint32 armour_repair_hp_per_block = 6;

  /** Cost (in 1/1000 vCHI) for repairing one HP of armour.  */
  optional uint32 armour_repair_cost_millis = 7;

  /** Cost (in vCHI) for copying a blueprint, per complexity.  */
  optional int64 bp_copy_cost = 8;

  /** Number of blocks for copying a blueprint, per complexity.  */
  optional uint32 bp_copy_blocks = 9;

  /** Cost (in vCHI) for constructing an item, per complexity.  */
  optional int64 construction_cost = 10;

  /** Nubmer of blocks for constructing an item, per complexity.  */
  optional uint32 construction_blocks = 11;

  /**
   * Delay (in blocks) until an owner-initiated update to the building
   * configuration takes effect.
   */
  optional uint32 building_update_delay = 12;

  /** Base fee (which is burnt) paid by sellers on the DEX in basis points.  */
  optional uint32 dex_fee_bps = 13;

  /** Minimum units of ore found in a prospected region.  */
  optional int64 min_region_ore = 14;
  /** Maximum units of ore found in a prospected region.  */
  optional int64 max_region_ore = 15;

  /** The address to which developer payments should be sent.  */
  optional string dev_addr = 16;
  /** The address to which burn payments should be sent.  */
  optional string burn_addr = 17;

  /** Whether or not god mode is enabled.  */
  optional bool god_mode = 18;

  /** Spawn areas for the factions (with the "r", "g", "b" string as key).  */
  map<string, SpawnArea> spawn_areas = 19;

  /** Data about the burnsale schedule.  */
  repeated BurnsaleStage burnsale_stages = 20;

  /**
   * Prospecting prizes.  They are just a list and not a map, because the
   * order matters (it is the order in which winning is checked).
   *
   * This field has a special rule when merging in the regtest configuration:
   * It is replaced rather than concatenated (which would be the default
   * behaviour for proto merge).
   */
  repeated ProspectingPrize prizes = 21;

}

/* ************************************************************************** */

/**
 * The hardcoded "configuration data" for Taurion.  This includes all data
 * that describes read-only aspects of the game, like known item or vehicle
 * types and stats for them.
 *
 * An instance of this proto is populated from text format encoded in
 * roconfig/<files>.pb.text and made available to all parts of the code.
 */
message ConfigData
{

  /** Known types of fungible items.  */
  map<string, ItemData> fungible_items = 1;

  /** Known types of buildings.  */
  map<string, BuildingData> building_types = 2;

  /** Distribution of resources for prospecting.  */
  optional ResourceDistribution resource_dist = 3;

  /** Initial buildings (ancient buildings and starter zones).  */
  repeated InitialBuilding initial_buildings = 4;

  /** Safe and starter zones.  */
  repeated SafeZone safe_zones = 5;

  /** Basic parameters.  */
  optional Params params = 6;

  /**
   * The testnet-specific configuration data.  This is merged into the main
   * configuration when running on testnet or regtest.
   */
  optional ConfigData testnet_merge = 100;

  /**
   * The regtest-specific configuration data.  This is merged into the testnet
   * data by the RoConfig-helper class when running on regtest.
   *
   * Safe zones and prizes in there will completely replace the values
   * in the mainnet config, instead of being added to them.
   */
  optional ConfigData regtest_merge = 101;

}
